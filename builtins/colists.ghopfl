# Builtin function definitions for common list operations
let

# GUARDED LISTS
# As we will define most coinductive colist functions as 
# lifts on a guarded analog, we first define some basic 
# operations for guarded lists
# =========================================================
l_empty_gl ← ( in ( inL 𝟙 ) ) ;
cons_gl ← ( λ e . λ l . in ( inR ( e, l ) ) ) ;

# head_gl : glist A -> A
head_gl  ← ( λ l . match ( out l ) { 
    inL x → x ; # ERROR
    inR y → fst y 
} ) ;

# tail_gl : glist A -> glist A
tail_gl  ← ( λ l . match ( out l ) { 
    inL x → x ; 
    inR y → snd y
} ) ;

# append_gl -> glist A -> glist A -> glist A
append_gl  ← ( fix f . λ l2 . λ list .
    match ( out list ) {
        inL end → l2 ;
        inR lst → cons_gl ( head_gl list ) ( 
            f ⊙ next l2 ⊙ ( tail_gl list ) 
        )
    }
) ;

# take_gl : int -> glist A -> glist A
take_gl ← ( fix f . λ n . λ list .
    match ( out list ) {
        inL x → list ;
        inR y → if ( n = 0 )
            then l_empty_gl
            else cons_gl ( head_gl list ) ( 
                f ⊙ next ( n - 1 ) ⊙ ( tail_gl list ) 
            )
    }
) ;

# edit_gl : int -> (A -> A) -> glist A -> glist A
edit_gl ← ( fix f . λ n . λ func . λ list .
    match ( out list ) {
        inL x → list ;
        inR y → if ( n = 0 )
            then cons_gl ( func ( head_gl list ) ) ( tail_gl list )
            else cons_gl ( head_gl list ) ( 
                f ⊙ next ( n - 1 ) ⊙ next func ⊙ ( tail_gl list ) 
            )
    }
) ;

# map_gl : (A -> B) -> glist A -> glist B
map_gl  ← ( λ func . fix f . λ list .
    match ( out list ) {
        inL end → list ;
        inR lst → cons_gl ( func ( head_gl list ) ) 
            ( f ⊙ ( tail_gl list ) )
    }
) ;


# COINDUCTIVE COLISTS
# =========================================================
# We will extend the functions from the guarded colists to
# coinductive colists using the limit function:
# limit : [] (A -> B) -> [] A -> [] B
limit   ← ( λ func . λ x . 
    boxI ( ( unbox func ) ( unbox x ) )
) ;
# As colists are defined as ([] glist), supplying a boxed
# glist function to limit, allows its second argument to be
# a colist

# Coinductive list construction
l_empty ← ( boxI ( in ( inL 𝟙 ) ) ) ;
cons_cl ← ( λ e . λ l . boxI ( in ( inR ( e, next ( unbox l ) ) ) ) ) ;

# Basic functions
# not typable???
# head : colist A -> A
head_cl ← ( λ l . match ( out ( unbox l ) ) { 
    inL x → x ; 
    inR y → fst y 
} ) ;

# tail : colist A -> colist A
tail_cl ← ( λ l . match ( out ( unbox l ) ) { 
    inL x → x ; 
    inR y → boxI ( prevI ( snd y ) ) 
} ) ;

# null : colist A -> bool
null_cl ← ( λ l . match ( out ( unbox l ) ) { 
    inL x → true ; 
    inR y → false 
} ) ;

# Some hard-coded indexation
# l_x : colist A -> A
l_2nd ← ( λ list . head ( tail list ) ) ;
l_3rd ← ( λ list . head ( tail ( tail list ) ) ) ;
l_4th ← ( λ list . head ( tail ( tail ( tail list ) ) ) ) ;

# co_length : colist A -> coNat
co_length ← ( fix f . λ l .
    match ( out ( unbox l ) ) {
        inL x → in ( inL 𝟙 ) ;
        inR y → in ( inR ( f ⊙ ( next ( tail l ) ) ) )
    }
) ;

# Indexation using the conatural numbers
# co_index : colist A -> coNat -> A
co_index ← ( fix f . λ idx . λ list .
    match (out idx) {
        inL x → head list ;
        inR y → prevI ( f ⊙ next ( l ) )
    }
) ;

# Lifted glist functions:
append_cl ← ( λ l1 . λ l2 .
   limit ( boxI ( append_gl ( unbox l2 ) ) ) l1
) ;
take_cl ← ( λ n .
    limit ( boxI ( take_gl n ) )
) ;
edit_cl ← ( λ n . λ func . 
    limit ( boxI ( edit_gl n func ) )
) ;
map_cl ← ( λ func .
    limit ( boxI ( map_gl func ) )
) ;

# Folds must be hard coded
# Otherwise ill-typed (see section below)
foldl_4 ← ( λ func . λ val . λ list . 
    func ( func ( func ( func 
                val
                ( head list ) 
            ) ( l_2nd list )
        ) ( l_3rd list )
    ) ( l_4th list )
) ;

# Indexation must be hard coded
# Otherwise ill-typed (see section below)
index_cheat ← ( λ idx . λ list .
    if ( idx = 0 ) 
        then head list
        else ( if ( idx = 1 )
            then l_2nd list
            else ( if ( idx = 2 )
                then l_3rd list
                else l_4th list
            )
        )
) ;

# Beyond this point, things aren't well typed
# =========================================================
# What is the length of an infinite list ?
length_cl ← ( fix f . λ l .
    match ( out ( unbox l ) ) {
        inL x → 0 ;
        inR y → 1 + prevI ( f ⊙ next ( tail l ) )
    }
) ;

# Cannot get to an arbitrary index without nexts
#   Each recursion step adds a next that cannot be prevd
#   as it contains the recursion variable which must, by
#   definition be of type: |>( A -> B )
index_cl ← ( fix f . λ idx . λ list .
    if ( idx = 0 )
        then head list
        else prevI ( f ⊙ next (idx - 1) ⊙ next (tail list) )
) ;

# What is the end result of a fold on an infinite list?
foldl_cl ← ( fix f . λ func . λ val . λ list .
    match ( out ( unbox list ) ) {
        inL end → val ;
        inR lst → prevI ( 
            f ⊙ next func 
              ⊙ next ( func ( head list ) val )
              ⊙ next ( tail list )
        )
    }
) ;

foldr_cl ← ( fix f . λ func . λ val . λ list .
    match ( out ( unbox list ) ) {
        inL end → val ;
        inR lst → func ( prevI ( 
            f ⊙ next func 
              ⊙ next ( val )
              ⊙ next ( tail l )
        ) ) ( head l )
    }
) ;

in: builtin
