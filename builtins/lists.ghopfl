# Builtin function definitions for common list operations
let
   
# Allows for application of boxed functions
#   Type: [] (A -> B) -> [] A -> [] B
limit   ← ( λ func . λ x . 
    boxI ( ( unbox func ) ( unbox x ) )
) ;

# Coinductive list construction
l_empty ← ( boxI ( in ( inL 𝟙 ) ) ) ;
l_empty_gl ← ( in ( inL 𝟙 ) ) ;
cons ← ( λ e . λ l . boxI ( in ( inR ( e, next ( unbox l ) ) ) ) ) ;
cons_gl ← ( λ e . λ l . in ( inR ( e, l ) ) ) ;

# Basic functions
head    ← ( λ l . match ( out ( unbox l ) ) { 
    inL x → x ; 
    inR y → fst y 
} ) ;

head_gl  ← ( λ l . match ( out l ) { 
    inL x → x ; 
    inR y → fst y 
} ) ;

tail    ← ( λ l . match ( out ( unbox l ) ) { 
    inL x → x ; 
    inR y → boxI ( prevI ( snd y ) ) 
} ) ;

tail_gl  ← ( λ l . match ( out l ) { 
    inL x → x ; 
    inR y → snd y
} ) ;

null    ← ( λ l . match ( out ( unbox l ) ) { 
    inL x → true ; 
    inR y → false 
} ) ;

# Not well typed!
length  ← ( fix f . λ l .
    match ( out ( unbox l ) ) {
        inL x → 0 ;
        inR y → 1 + prevI ( f ⊙ next ( tail l ) )
    }
) ;

# Well typed.
co_length ← ( fix f . λ l .
    match ( out ( unbox l ) ) {
        inL x → in ( inL 𝟙 ) ;
        inR y → in ( inR ( f ⊙ ( next ( tail l ) ) ) )
    }
) ;
    
append  ← ( fix f . λ l1 . λ l2 .
    boxI ( match ( out ( unbox l1 ) ) {
        inL end → unbox l2 ;
        inR lst → unbox ( cons ( head l1 ) 
            ( prevI ( f ⊙ next ( tail l1 ) ⊙ next l2 ) )
        )
    } )
) ;

# Access
index ← ( fix f . λ idx . λ list .
    if ( idx = 0 )
        then head list
        else prevI ( f ⊙ next (idx - 1) ⊙ next (tail list) )
) ;

co_index ← ( fix f . λ idx . λ list .
    match (out idx) {
        inL x → head list ;
        inR y → prevI ( f ⊙ next ( l ) )
    }
) ;

# Sublists
take_gl ← ( fix f . λ n . λ list .
    match ( out list ) {
        inL x → list ;
        inR y → if ( n = 0 )
            then l_empty_gl
            else cons_gl ( head_gl list ) ( 
                f ⊙ next ( n - 1 ) ⊙ ( tail_gl list ) 
            )
    }
) ;

take ← ( λ n . λ list .
    limit ( boxI ( take_gl n ) ) list
) ;

edit_gl ← ( fix f . λ n . λ func . λ list .
    match ( out list ) {
        inL x → list ;
        inR y → if ( n = 0 )
            then cons_gl ( func ( head_gl list ) ) ( tail_gl list )
            else cons_gl ( head_gl list ) ( 
                f ⊙ next ( n - 1 ) ⊙ next func ⊙ ( tail_gl list ) 
            )
    }
) ;

edit ← ( λ n . λ func . 
    limit ( boxI ( edit_gl n func ) )
) ;

# Ill-typed!
drop ← (fix f . λ n . λ list . 
    match ( out ( unbox list ) ) { 
        inL end → list ;
        inR lst → if ( n = 0 ) 

            then list
            else prevI ( f ⊙ next ( n - 1 ) ⊙ next ( tail list ) )
    }
) ;

# Tranformations
# func and val must have a constant type!

map_gl  ← ( λ func . fix f . λ list .
    match ( out list ) {
        inL end → list ;
        inR lst → cons_gl ( func ( head_gl list ) ) 
            ( f ⊙ ( tail_gl list ) )
    }
) ;

map ← ( λ func . λ list .
    limit ( boxI ( map_gl func ) ) list
) ;
    
# Folds: Not typable!
# func and val must have a constant type!
foldl   ← ( fix f . λ func . λ val . λ list .
    match ( out ( unbox list ) ) {
        inL end → val ;
        inR lst → prevI ( 
            f ⊙ next func 
              ⊙ next ( func ( head list ) val )
              ⊙ next ( tail list )
        )
    }
) ;

foldr   ← ( fix f . λ func . λ val . λ list .
    match ( out ( unbox list ) ) {
        inL end → val ;
        inR lst → func ( prevI ( 
            f ⊙ next func 
              ⊙ next ( val )
              ⊙ next ( tail l )
        ) ) ( head l )
    }
) ;

in: builtin
