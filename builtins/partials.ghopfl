# Defines the type of a partial result, and some functions on them
let

# Value is available now
partial_now     ← ( λ x . in ( inL ( x ) ) ) ;
# Delay value by one step
partial_delay   ← ( λ x . in ( inR ( next x ) ) ) ;
# Never finishing computation
partial_never   ← ( fix f . in ( inR f ) ) ;
# Constructor for recursive use
partial_later   ← ( λ x . in ( inR ( x ) ) ) ;

# Apply a single argument function to the partial result
partial_map     ← ( λ func . fix f . λ x .
    match ( out x ) {
        inL value → partial_now ( func value ) ;
        inR delay → partial_later ( f ⊙ delay ) 
    }
) ;

# Applies a binary operation to one partial result and one regular data type
partial_func2_1 ← ( λ func . λ a . fix f . λ x .
    match ( out x ) {
        inL value → partial_now ( func a value ) ;
        inR delay → partial_later ( f ⊙ delay )
    }
) ;

# Applies a binary function to two partial results
partial_func2   ← ( λ func . fix f . λ x1 . λ x2 .
    match ( out x1 ) {
        inL value → partial_func2_1 func value x2 ;
        inR delay → partial_later ( f ⊙ delay ⊙ next x2 )
    }
) ;

in: builtin
