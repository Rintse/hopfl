# Defines the type of a delayed result, and some functions on them
let

# Value is available now
dres_now     ← ( λ x . in ( inL ( x ) ) ) ;
# Delay value by one step
dres_delay   ← ( λ x . in ( inR ( next x ) ) ) ;
# Never finishing computation
dres_never   ← ( fix f . in ( inR f ) ) ;
# Constructor for recursive use
dres_later   ← ( λ x . in ( inR ( x ) ) ) ;

# Apply a single argument function to the partial result
dres_map     ← ( λ func . fix f . λ x .
    match ( out x ) {
        inL value → dres_now ( func value ) ;
        inR delay → dres_later ( f ⊙ delay ) 
    }
) ;

# Applies a binary operation to one delayed result and one regular data type
dres_func2_1 ← ( λ func . λ a . fix f . λ x .
    match ( out x ) {
        inL value → dres_now ( func a value ) ;
        inR delay → dres_later ( f ⊙ delay )
    }
) ;
# Flipped argument order
dres_func2_2 ← ( λ func . fix f . λ x . λ a .
    match ( out x ) {
        inL value → dres_now ( func value a ) ;
        inR delay → dres_later ( f ⊙ delay ⊙ next a )
    }
) ;

# Applies a binary function to two delayed results
dres_func2  ← ( λ func . fix f . λ x1 . λ x2 .
    match ( out x1 ) {
        # First argument available first, continue with second
        inL value1 → dres_func2_1 func value1 x2 ;
        inR delay1 → ( match ( out x2 ) {
            # Second argument available first, continue with first
            inL value2 → dres_func2_2 func x1 value2 ;
            # Otherwise, go one level deeper in both
            inR delay2 → dres_later ( f ⊙ delay1 ⊙ delay2 )
        } )
    }
) ;

in: builtin
