-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Syntax.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Lam = Lam String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Conj = Conj String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Disj = Disj String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TNot = TNot String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TLeq = TLeq String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TGeq = TGeq String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TLApp = TLApp String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data BConst = BTrue | BFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Var Ident
    | Val Double
    | BVal BConst
    | Next Exp
    | In Exp
    | Out Exp
    | Fst Exp
    | Snd Exp
    | InL Exp
    | InR Exp
    | App Exp Exp
    | LApp Exp TLApp Exp
    | Mul Exp Exp
    | Div Exp Exp
    | Add Exp Exp
    | Sub Exp Exp
    | Eq Exp Exp
    | Lt Exp Exp
    | Gt Exp Exp
    | Leq Exp TLeq Exp
    | Geq Exp TGeq Exp
    | Not TNot Exp
    | And Exp Conj Exp
    | Or Exp Disj Exp
    | Pair Exp Exp
    | Norm Exp
    | Ite Exp Exp Exp
    | Match Exp Ident Exp Ident Exp
    | Abstr Lam Ident Exp
    | Rec Ident Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Assignment = Assign Ident Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Environment = Env [Assignment]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

