-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Par where
import qualified Syntax.Abs
import Syntax.Lex
}

%name pTyp Typ
%name pExp Exp
%name pEnv Env
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '.' { PT _ (TS _ 4) }
  '::' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  '<' { PT _ (TS _ 7) }
  '=' { PT _ (TS _ 8) }
  '>' { PT _ (TS _ 9) }
  'fix' { PT _ (TS _ 10) }
  'fst' { PT _ (TS _ 11) }
  'real' { PT _ (TS _ 12) }
  'snd' { PT _ (TS _ 13) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_Lam { PT _ (T_Lam $$) }
  L_Prod { PT _ (T_Prod $$) }
  L_To { PT _ (T_To $$) }
  L_Next { PT _ (T_Next $$) }
  L_Napp { PT _ (T_Napp $$) }

%%

Ident :: { Syntax.Abs.Ident}
Ident  : L_Ident { Syntax.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

Lam :: { Syntax.Abs.Lam}
Lam  : L_Lam { Syntax.Abs.Lam $1 }

Prod :: { Syntax.Abs.Prod}
Prod  : L_Prod { Syntax.Abs.Prod $1 }

To :: { Syntax.Abs.To}
To  : L_To { Syntax.Abs.To $1 }

Next :: { Syntax.Abs.Next}
Next  : L_Next { Syntax.Abs.Next $1 }

Napp :: { Syntax.Abs.Napp}
Napp  : L_Napp { Syntax.Abs.Napp $1 }

Typ3 :: { Syntax.Abs.Typ }
Typ3 : 'real' { Syntax.Abs.TReal } | '(' Typ ')' { $2 }

Typ2 :: { Syntax.Abs.Typ }
Typ2 : Next Typ3 { Syntax.Abs.TNext $1 $2 } | Typ3 { $1 }

Typ1 :: { Syntax.Abs.Typ }
Typ1 : Typ1 Prod Typ2 { Syntax.Abs.TPRod $1 $2 $3 } | Typ2 { $1 }

Typ :: { Syntax.Abs.Typ }
Typ : Typ1 To Typ { Syntax.Abs.TFun $1 $2 $3 } | Typ1 { $1 }

Exp4 :: { Syntax.Abs.Exp }
Exp4 : Ident { Syntax.Abs.Var $1 }
     | Integer { Syntax.Abs.Val $1 }
     | '(' Exp ')' { $2 }

Exp1 :: { Syntax.Abs.Exp }
Exp1 : 'fix' Ident '.' Exp1 { Syntax.Abs.Rec $2 $4 }
     | Lam Ident '.' Exp1 { Syntax.Abs.Abstr $1 $2 $4 }
     | Exp2 { $1 }

Exp3 :: { Syntax.Abs.Exp }
Exp3 : Exp3 Exp4 { Syntax.Abs.App $1 $2 }
     | Exp4 Napp Exp4 { Syntax.Abs.NApp $1 $2 $3 }
     | 'fst' Exp4 { Syntax.Abs.Fst $2 }
     | 'snd' Exp4 { Syntax.Abs.Snd $2 }
     | Exp4 { $1 }

Exp2 :: { Syntax.Abs.Exp }
Exp2 : '<' Exp3 ',' Exp2 '>' { Syntax.Abs.Pair $2 $4 }
     | Exp3 { $1 }

Exp :: { Syntax.Abs.Exp }
Exp : Exp '::' Typ { Syntax.Abs.Typed $1 $3 } | Exp1 { $1 }

Assignment :: { Syntax.Abs.Assignment }
Assignment : Ident '=' Exp { Syntax.Abs.Assign $1 $3 }

Environment :: { Syntax.Abs.Environment }
Environment : ListAssignment { Syntax.Abs.Env $1 }

ListAssignment :: { [Syntax.Abs.Assignment] }
ListAssignment : {- empty -} { [] }
               | Assignment { (:[]) $1 }
               | Assignment ';' ListAssignment { (:) $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

