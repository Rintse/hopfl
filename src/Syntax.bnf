-- Syntax of GHOPFL defined in LBNF format
-- To be processed into a parser and lexer using BNFC

entrypoints Exp, Environment ;
comment     "#" ;

-- Tokens
token       Lam     ('λ' | '\\') ;
token       Conj    ('∧' | 'a''n''d') ;
token       Disj    ('∨' | 'o''r') ;
token       TNot    ('¬' | '!') ;
token       TLeq    ('≤' | '<''=') ;
token       TGeq    ('≥' | '>''=') ;
token       TLApp   ('⊙' | '(''.'')') ;
token       TSub    ('←' | '<''-') ;
token       TMatch  ('→' | '-''>') ;

-- Boolean expressions
BTrue.      BConst  ::= "true" ;
BFalse.     BConst  ::= "false" ;

-- Terms
Var.        Exp11   ::= Ident ;
Val.        Exp11   ::= Double ;
BVal.       Exp11   ::= BConst ;

-- Later modality (with applicative function LApp)
Next.       Exp10   ::= "next" Exp11 ;
Prev.       Exp10   ::= "prev" SubL "." Exp11 ;
-- Syntactic sugar for empty sublist
PrevE.      Exp10   ::= "prev" Exp11;
-- Syntactic sugar for prev{\x ← \x}.t with \x being all free vars in t
PrevF.      Exp10   ::= "prevF" Exp11;

Box.        Exp10   ::= "box" SubL "." Exp11 ;
Unbox.      Exp10   ::= "unbox" Exp11 ;

-- Recursion
In.         Exp10   ::= "in" Exp11 ;
Out.        Exp10   ::= "out" Exp11 ;

-- Projections
Fst.        Exp10   ::= "fst" Exp11 ;
Snd.        Exp10   ::= "snd" Exp11 ;

-- Injections
InL.        Exp10   ::= "inL" Exp11 ;
InR.        Exp10   ::= "inR" Exp11 ;

-- (Delayed) application
App.        Exp9    ::= Exp9 Exp10 ;
LApp.       Exp9    ::= Exp9 TLApp Exp10;

-- Arithmetic
Mul.        Exp8    ::= Exp8 "*" Exp9 ;
Div.        Exp8    ::= Exp8 "/" Exp9 ;
Add.        Exp7    ::= Exp7 "+" Exp8 ;
Sub.        Exp7    ::= Exp7 "-" Exp8 ;

-- Boolean
Eq.         Exp6    ::= Exp6 "=" Exp7 ;
Lt.         Exp6    ::= Exp6 "<" Exp7 ;
Gt.         Exp6    ::= Exp6 ">" Exp7 ;
Leq.        Exp6    ::= Exp6 TLeq Exp7 ;
Geq.        Exp6    ::= Exp6 TGeq Exp7 ;

Not.        Exp5    ::= TNot Exp6 ;
And.        Exp4    ::= Exp4 Conj Exp5 ;
Or.         Exp4    ::= Exp4 Disj Exp5 ;

Pair.       Exp3    ::= "[" Exp3 "," Exp3 "]";
Norm.       Exp3    ::= "normal" Exp3 ;

Ite.        Exp2    ::= "if" Exp4 "then" Exp7 "else" Exp7 ;
Match.      Exp1    ::= "match" Exp11 "{" Ident TMatch Exp1 ";" Ident TMatch Exp1 "}" ;

Abstr.      Exp     ::= Lam Ident "." Exp ;
Rec.        Exp     ::= "fix" Ident "." Exp ;
coercions Exp 11 ;

-- Explicit substitution lists, reuse environment
SubList.    SubL    ::= "{" Environment "}" ;

-- Environment passing
Assign.     Assignment  ::= Ident TSub Exp ;
Env.        Environment ::= [Assignment] ;
separator   Assignment ";" ;
