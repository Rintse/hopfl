entrypoints Exp, Environment ;
comment     "#" ;

-- Tokens
token       Lam     ('λ' | '\\') ;
token       Conj    ('∧' | 'a''n''d') ;
token       Disj    ('∨' | 'o''r') ;
token       TLeq    ('≤' | '<''=') ;
token       TGeq    ('≥' | '>''=') ;
token       TLApp   ('⊙' | '(''.'')') ;


-- Boolean expressions
BTrue.      BConst  ::= "true" ;
BFalse.     BConst  ::= "false" ;


-- Terms
Var.        Exp11   ::= Ident ;
Val.        Exp11   ::= Double ;
BVal.       Exp11   ::= BConst ;

Next.       Exp10   ::= "next" Exp11 ;
In.         Exp10   ::= "in" Exp11 ;
Out.        Exp10   ::= "out" Exp11 ;
Fst.        Exp10   ::= "fst" Exp11 ;
Snd.        Exp10   ::= "snd" Exp11 ;
InL.        Exp10   ::= "inL" Exp11 ;
InR.        Exp10   ::= "inR" Exp11 ;

App.        Exp9    ::= Exp9 Exp10 ;
LApp.       Exp9    ::= Exp9 TLApp Exp10;

-- Arithmetic
Mul.        Exp8   ::= Exp8 "*" Exp9 ;
Div.        Exp8   ::= Exp8 "/" Exp9 ;
Add.        Exp7   ::= Exp7 "+" Exp8 ;
Sub.        Exp7   ::= Exp7 "-" Exp8 ;

-- Boolean
Eq.         Exp6   ::= Exp6 "=" Exp7 ;
Lt.         Exp6   ::= Exp6 "<" Exp7 ;
Gt.         Exp6   ::= Exp6 ">" Exp7 ;
Leq.        Exp6   ::= Exp6 TLeq Exp7 ;
Geq.        Exp6   ::= Exp6 TGeq Exp7 ;

And.        Exp5   ::= Exp5 Conj Exp6 ;
Or.         Exp5   ::= Exp5 Disj Exp6 ;

Pair.       Exp4    ::= "[" Exp4 "," Exp4 "]";
Norm.       Exp4    ::= "normal" Exp4 ;

Ite.        Exp3    ::= "if" Exp5 "then" Exp7 "else" Exp7 ";" ;
Case.       Exp2    ::= "case" Exp11 "of" "{" Ident "->" Exp11 ";" Ident "->" Exp11 "}" ;

Abstr.      Exp     ::= Lam Ident "." Exp ;
Rec.        Exp     ::= "fix" Ident "." Exp ;
coercions Exp 11 ;


-- Environment passing
Assign.     Assignment  ::= Ident "=" Exp ;
Env.        Environment ::= [Assignment] ;
separator   Assignment ";" ;
