
module Semantics.Builtins where

import Syntax.Raw.Abs

builtins :: [Assignment]
builtins =
    [Assign (Ident "head_g") (TSub "\\8592") (Abstr (Lam "\\955") (Ident "s") (Fst (Out (Unbox (Var (Ident "s")))))),Assign (Ident "tail_g") (TSub "\\8592") (Abstr (Lam "\\955") (Ident "s") (BoxI (PrevI (Snd (Out (Unbox (Var (Ident "s")))))))),Assign (Ident "idx_g") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "idx") (Abstr (Lam "\\955") (Ident "s") (Ite (Eq (Var (Ident "idx")) (IVal 0)) (App (Abstr (Lam "\\955") (Ident "s") (Fst (Out (Unbox (Var (Ident "s")))))) (Var (Ident "s"))) (PrevI (LApp (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Sub (Var (Ident "idx")) (IVal 1)))) (TLApp "\\8857") (Next (App (Abstr (Lam "\\955") (Ident "s") (BoxI (PrevI (Snd (Out (Unbox (Var (Ident "s")))))))) (Var (Ident "s"))))))))))] ++
        [Assign (Ident "cons") (TSub "\\8592") (Abstr (Lam "\\955") (Ident "e") (Abstr (Lam "\\955") (Ident "l") (InR (Pair (Var (Ident "e")) (Var (Ident "l")))))),Assign (Ident "head") (TSub "\\8592") (Abstr (Lam "\\955") (Ident "l") (Match (Var (Ident "l")) (Ident "x") (TMatch "\\8594") (Var (Ident "x")) (Ident "y") (TMatch "\\8594") (Fst (Var (Ident "y"))))),Assign (Ident "tail") (TSub "\\8592") (Abstr (Lam "\\955") (Ident "l") (Match (Var (Ident "l")) (Ident "x") (TMatch "\\8594") (Var (Ident "x")) (Ident "y") (TMatch "\\8594") (Snd (Var (Ident "y"))))),Assign (Ident "null") (TSub "\\8592") (Abstr (Lam "\\955") (Ident "l") (Match (Var (Ident "l")) (Ident "x") (TMatch "\\8594") (BVal BTrue) (Ident "y") (TMatch "\\8594") (BVal BFalse))),Assign (Ident "length") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "l") (Match (Var (Ident "l")) (Ident "x") (TMatch "\\8594") (IVal 0) (Ident "y") (TMatch "\\8594") (Add (IVal 1) (PrevI (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Snd (Var (Ident "y")))))))))),Assign (Ident "append") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "l1") (Abstr (Lam "\\955") (Ident "l2") (Match (Var (Ident "l1")) (Ident "end") (TMatch "\\8594") (Var (Ident "l2")) (Ident "lst") (TMatch "\\8594") (InR (Pair (Fst (Var (Ident "lst"))) (PrevI (LApp (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Snd (Var (Ident "lst"))))) (TLApp "\\8857") (Next (Var (Ident "l2"))))))))))),Assign (Ident "take") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "n") (Abstr (Lam "\\955") (Ident "l") (Match (Var (Ident "l")) (Ident "x") (TMatch "\\8594") (Var (Ident "l")) (Ident "y") (TMatch "\\8594") (Ite (Eq (Var (Ident "n")) (IVal 0)) (InL (Single (TSingle "\\120793"))) (InR (Pair (Fst (Var (Ident "y"))) (PrevI (LApp (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Sub (Var (Ident "n")) (IVal 1)))) (TLApp "\\8857") (Next (Snd (Var (Ident "y"))))))))))))),Assign (Ident "map") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "func") (Abstr (Lam "\\955") (Ident "list") (Match (Var (Ident "list")) (Ident "end") (TMatch "\\8594") (Var (Ident "list")) (Ident "lst") (TMatch "\\8594") (InR (Pair (App (Var (Ident "func")) (Fst (Var (Ident "lst")))) (PrevI (LApp (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Var (Ident "func")))) (TLApp "\\8857") (Next (Snd (Var (Ident "lst")))))))))))),Assign (Ident "foldl") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "func") (Abstr (Lam "\\955") (Ident "val") (Abstr (Lam "\\955") (Ident "list") (Match (Var (Ident "list")) (Ident "end") (TMatch "\\8594") (Var (Ident "val")) (Ident "lst") (TMatch "\\8594") (PrevI (LApp (LApp (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Var (Ident "func")))) (TLApp "\\8857") (Next (App (App (Var (Ident "func")) (Fst (Var (Ident "lst")))) (Var (Ident "val"))))) (TLApp "\\8857") (Next (Snd (Var (Ident "lst"))))))))))),Assign (Ident "foldr") (TSub "\\8592") (Rec (Ident "f") (Abstr (Lam "\\955") (Ident "func") (Abstr (Lam "\\955") (Ident "val") (Abstr (Lam "\\955") (Ident "list") (Match (Var (Ident "list")) (Ident "end") (TMatch "\\8594") (Var (Ident "val")) (Ident "lst") (TMatch "\\8594") (App (App (Var (Ident "func")) (PrevI (LApp (LApp (LApp (Var (Ident "f")) (TLApp "\\8857") (Next (Var (Ident "func")))) (TLApp "\\8857") (Next (Var (Ident "val")))) (TLApp "\\8857") (Next (Snd (Var (Ident "lst"))))))) (Fst (Var (Ident "lst")))))))))]
