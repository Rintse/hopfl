-- Syntax of GHOPFL defined in LBNF format
-- To be processed into a parser and lexer using BNFC

entrypoints Environment, Exp, Prg;
comment     "#" ;

-- Tokens
token       Lam     ('Œª' | '\\') ;
token       Conj    ('‚àß' | 'a''n''d') ;
token       Disj    ('‚à®' | 'o''r') ;
token       TNot    ('¬¨' | '!') ;
token       TLeq    ('‚â§' | '<''=') ;
token       TGeq    ('‚â•' | '>''=') ;
token       TLApp   ('‚äô' | '(''*'')') ;
token       TSub    ('‚Üê' | '<''-') ;
token       TMatch  ('‚Üí' | '-''>') ;
-- Singleton token
token       TSingle ( 'ùüô' | '{''*''}' ) ;

-- Boolean expressions
BTrue.      BConst  ::= "true" ;
BFalse.     BConst  ::= "false" ;

-- Terms
Single.     Exp13   ::= TSingle ;
Var.        Exp13   ::= Ident ;
DVal.       Exp13   ::= Double ;
IVal.       Exp13   ::= Integer ;
BVal.       Exp13   ::= BConst ;

-- Single objects (super high precedence)
EList.      Exp12    ::= Lst ;
Pair.       Exp12    ::= "(" Exp "," Exp1 ")" ;

-- Later modality (with applicative function LApp)
Next.       Exp11   ::= "next" Exp12 ;
Prev.       Exp11   ::= "prev" "{" Environment "}" "." Exp12 ;
-- Syntactic sugar for empty sublist
PrevE.      Exp11   ::= "prev" Exp12;
-- Syntactic sugar for prev{\x ‚Üê \x}.t with \x being all free vars in t
PrevI.      Exp11   ::= "prevI" Exp12;

Box.        Exp11   ::= "box" "{" Environment "}" "." Exp11 ;
BoxI.       Exp11   ::= "boxI" Exp12 ;
Unbox.      Exp11   ::= "unbox" Exp12 ;

Force.      Exp11   ::= "force" Exp12 ;

-- Recursion
In.         Exp11   ::= "in" Exp12 ;
Out.        Exp11   ::= "out" Exp12 ;

-- Projections
Fst.        Exp11   ::= "fst" Exp12 ;
Snd.        Exp11   ::= "snd" Exp12 ;

-- Injections
InL.        Exp11   ::= "inL" Exp12 ;
InR.        Exp11   ::= "inR" Exp12 ;

-- List operations

ListHead.   Exp11   ::= "head"      Exp12 ;
ListTail.   Exp11   ::= "tail"      Exp12 ;
ListNull.   Exp11   ::= "null"      Exp12 ;
ListLength. Exp11   ::= "length"    Exp12 ;

ListFold.   Exp11   ::= "foldl"     Exp12 Exp12 Exp12 ;
ListMap.    Exp11   ::= "map"       Exp12 Exp12 ;
ListElem.   Exp11   ::= "elem"      Exp12 Exp12 ;
ListTake.   Exp11   ::= "take"      Exp12 Exp12 ;
ListDrop.   Exp11   ::= "drop"      Exp12 Exp12 ;

-- (Delayed) application
App.        Exp10   ::= Exp10 Exp11 ;
LApp.       Exp10   ::= Exp10 TLApp Exp11;

ListIndex.  Exp10   ::= Exp10 "|" Exp11 "|" ;
ListCons.   Exp10   ::= Exp10 ":" Exp11 ;
ListAppend. Exp10   ::= Exp10 "++" Exp11 ;

-- Arithmetic
Min.        Exp9    ::= "-" Exp10 ;
Pow.        Exp9    ::= Exp9 "^" Exp10 ;
Mul.        Exp8    ::= Exp8 "*" Exp9 ;
Div.        Exp8    ::= Exp8 "/" Exp9 ;
Mod.        Exp8    ::= Exp8 "%" Exp9 ;
Add.        Exp7    ::= Exp7 "+" Exp8 ;
Sub.        Exp7    ::= Exp7 "-" Exp8 ;

-- Boolean
Eq.         Exp6    ::= Exp6 "=" Exp7 ;
Lt.         Exp6    ::= Exp6 "<" Exp7 ;
Gt.         Exp6    ::= Exp6 ">" Exp7 ;
Leq.        Exp6    ::= Exp6 TLeq Exp7 ;
Geq.        Exp6    ::= Exp6 TGeq Exp7 ;

Not.        Exp5    ::= TNot Exp6 ;
And.        Exp4    ::= Exp4 Conj Exp5 ;
Or.         Exp4    ::= Exp4 Disj Exp5 ;

Norm.       Exp3    ::= "normal" Exp3 ;

Ite.        Exp2    ::= "if" Exp13 "then" Exp3 "else" Exp3 ;
Match.      Exp1    ::= "match" Exp13 "{" "inL" Ident TMatch Exp2 ";" "inR" Ident TMatch Exp2 "}" ;

Abstr.      Exp     ::= Lam Ident "." Exp ;
Rec.        Exp     ::= "fix" Ident "." Exp ;
coercions Exp 13 ;

-- List syntactic sugar
List.       Lst     ::= "[" [ Exp ] "]" ;
separator   Exp     "," ;

-- Program with definitions
DefProg.    Prg     ::= "let" Environment "in:" Exp ;
Prog.       Prg     ::= Exp ;

-- Environment passing
Env.        Environment ::= [ Assignment ] ;
Assign.     Assignment  ::= Ident TSub Exp ;
separator   Assignment ";" ;

