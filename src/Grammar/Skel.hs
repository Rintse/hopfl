-- Haskell module generated by the BNF converter

module Grammar.Skel where

import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x
transLam :: Grammar.Abs.Lam -> Result
transLam x = case x of
  Grammar.Abs.Lam string -> failure x
transProd :: Grammar.Abs.Prod -> Result
transProd x = case x of
  Grammar.Abs.Prod string -> failure x
transTo :: Grammar.Abs.To -> Result
transTo x = case x of
  Grammar.Abs.To string -> failure x
transNext :: Grammar.Abs.Next -> Result
transNext x = case x of
  Grammar.Abs.Next string -> failure x
transNapp :: Grammar.Abs.Napp -> Result
transNapp x = case x of
  Grammar.Abs.Napp string -> failure x
transTyp :: Grammar.Abs.Typ -> Result
transTyp x = case x of
  Grammar.Abs.TReal -> failure x
  Grammar.Abs.TNext next typ -> failure x
  Grammar.Abs.TPRod typ1 prod typ2 -> failure x
  Grammar.Abs.TFun typ1 to typ2 -> failure x
transExp :: Grammar.Abs.Exp -> Result
transExp x = case x of
  Grammar.Abs.Var ident -> failure x
  Grammar.Abs.Val integer -> failure x
  Grammar.Abs.Rec ident exp -> failure x
  Grammar.Abs.Abstr lam ident exp -> failure x
  Grammar.Abs.App exp1 exp2 -> failure x
  Grammar.Abs.NApp exp1 napp exp2 -> failure x
  Grammar.Abs.Pair exp1 exp2 -> failure x
  Grammar.Abs.Fst exp -> failure x
  Grammar.Abs.Snd exp -> failure x
  Grammar.Abs.Typed exp typ -> failure x
transAssignment :: Grammar.Abs.Assignment -> Result
transAssignment x = case x of
  Grammar.Abs.Assign ident exp -> failure x
transEnvironment :: Grammar.Abs.Environment -> Result
transEnvironment x = case x of
  Grammar.Abs.Env assignments -> failure x

