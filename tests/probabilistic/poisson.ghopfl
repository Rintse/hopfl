# Samples a Poisson distribution and calculates the mean
# of the distribution from an infinite stream of samples
# Free variables to pass through the environment:
#   l:  The mean of the desired Poisson
# Example run:
#   stack run ghopfl-exe -- -i tests/probabilistic/poisson.ghopfl -E -e "l<-1.0" -d "0.9;0.8;0.5" -n 3

let
    # Recursively sample [0,1] in such a way 
    # that the result is poisson distributed
    poisson ← ( λ l . fix f . λ p .
        if ( p < exp ( - l ) )
            then dres_now (-1)
            else dres_map ( add 1 ) 
                ( dres_later ( f ⊙ next ( p * rand ) ) )
    ) ;

    # Wrapper that fixes illogical argument order
    sample_poisson ← ( ( flip2 poisson ) 1.0 ) ;

in: force ( sample_poisson l )

