# Simulated annealing on the max-cut problem.
# Solutions are represented as bitstrings where the boolean values
# indicate in which partition a given vertex is contained
#
# Takes the third value from the stream (hard coded as indexation
# wihtout nexts is impossible )
#
# Example run:
#   stack run hopfl-exe -- -v -E -d "0.6;0.3;0.4;0.1;0.9" -i tests/algorithms/annealing.hopfl
# Should give the optimal, after first accepting a worse solution

let
    # We want to optimize for the following graph:
    # 0 - 1     Here the optimal solution is to cut 
    # | \ |     such that the two partitions are {0, 3}
    # 3 - 2     and {1, 2} (4 cuts), as adjacency list:
    graph ← [ (0,1), (0,2), (0,3), (1,2), (2,3) ] ;
    
    # Initial solution
    init_s ← [ true, true, false, false ] ;
    n_vertices ← length init_s ;
    
    # Initial temperature
    init_temp ← 1.0 ; 

    # Returns 1.0 if s cuts edge, 0.0 otherwise
    # An edge is cut if its verteces are in different partitions
    cuts ← ( λ s . λ edge .
        if ( xor s|fst edge| s|snd edge| ) then 1 else 0
    ) ;

    # The amount of cuts a solution makes
    cut_count ← ( λ s . foldl add 0 ( map ( cuts s ) graph ) ) ;
    
    # The evaluation function should be lower for better solutions
    eval ← ( λ s . 1.0 / ( cut_count s ) ) ;

    # Flip bit in s at given idx
    flip_bit ← ( λ idx . λ s . ( take idx s ) ++ [ ¬ s|idx| ] ++ ( drop idx s ) ) ;

    # Mutation function, randomly flips one bit in the solution vector
    mutate ← ( flip_bit ( rand_idx n_vertices ) ) ;

    # The chance of accepting a neigbour if it is worse
    p_accept_new ← ( λ old . λ new . λ temp . 
        exp( - ( ( eval(new) - eval(old) ) / temp ) )
    ) ;

    # Non-deterministically select between neighbour and original
    select ← ( λ old . λ new . λ temp . 
        if ( (eval new) < (eval old) )
            then new 
            else (
                if ( rand < ( p_accept_new old new temp ) )
                    then new 
                    else old
            )
    ) ;
    
    # Gets the temperature for round k
    get_temp ← ( λ k . init_temp / (k + 1) ) ; 

    # The optimization stream
    opt_stream ← ( boxI ( ( fix f . λ k . λ s . in (
        ( s, f ⊙ next ( k + 1 ) 
               ⊙ next ( select s ( mutate s ) ( get_temp k ) ) 
        ) ) ) 0 init_s )
    ) ;

in: cuts init_s (graph|0|)
#in: s_head_c (s_tail_c( opt_stream) )

