# Taking the last element of a list-like type:
# μ X . |R + |R x X

# Gets the last item by means of matching on the size of the list
( fix f . λ l .
match (out l) {
    last -> last ;
    list -> f ⊙ (snd list)
} )

# Builds a list with size increasing elements: [1.0, [2.0. [3.0..]]]
(( fix f . λ max . λ size .
    if ( size >= max ) then in (inL size)
    else in (inR ([size, f ⊙ (next max) ⊙ (next (size + 1.0))] ))
) 0.0 size )

