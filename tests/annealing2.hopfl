# Simulated annealing on the max-cut problem
# Solutions are represented as bitstrings where the boolean values
# indicate in which partition a given vertex is contained
# Free variables to pass through the environment:
#   iteration:  The optimization iteration to get the result from
#
# Example run:
#   stack run -- -E -d "0.6;0.3;0.4;0.1;0.9;" -e "" -v -i test/tests/annealing.hopfl
# Should give the optimal, after first accepting a worse solution

let
    # Mathematical tools
    e ← 2.71828 ;
    exp ← (λ x . e ^ x) ;
    xor ← ( λ p . λ q . ( p ∨ q ) ∧ ¬ ( p ∧ q ) ) ;
    add ← ( λ x . λ y . x + y ) ;

    # Get item at idx in l
    get ← ( fix f . λ l . λ idx . 
        match l {
            inL x → false ; # Should not happen
            inR y → if ( idx = 0 )
                then fst y
                else prevI ( f ⊙ next ( snd y ) ⊙ next ( idx - 1 ) )
        }
    ) ;
    
    # Flip bit in s at given idx
    flip_bit ← ( fix f . λ idx . λ s . 
        match s {
            inL x → false ; # Should not happen
            inR y → if ( idx = 0 )
                then inR ( ¬( fst y ), snd y )
                else ( inR ( ( fst y, prevI ( f ⊙ next ( idx-1 ) ⊙ next ( snd y ) ) ) ) )
        }
    ) ;

    # We want to optimize for the following graph:
    # 0 - 1     Here the optimal solution is to cut 
    # | \ |     such that the two partitions are {0, 3}
    # 3 - 2     and {1, 2} (4 cuts), as adjacency list:
    graph ← [ (0,1), (0,2), (0,3), (1,2), (2,3) ] ;
    
    # Initial solution
    init_s ← [ true, true, false, false ] ;
    n_vertices ← length init_s ;
    
    # Initial temperature
    init_temp ← 1.0 ; 

    # Returns 1.0 if s cuts edge, 0.0 otherwise
    # An edge is cut if its verteces are in different partitions
    cuts ← ( λ s . λ edge .
        if ( xor ( get s ( fst edge ) ) ( get s ( snd edge ) ) ) then 1 else 0
    ) ;

    # The amount of cuts a solution makes (recurstion over adjacency list)
    cut_count ← ( λ s . foldl add 0 ( map ( cuts s ) graph ) ) ;
    
    # The evaluation function should be lower for better solutions
    eval ← ( λ s . 1.0 / ( cut_count s ) ) ;

    # Random number (NOT UNIFORM) in [0.0, 1.0]
    rand ← ( ( λ draw . 
        if (draw < 0.0)
            then 0.0
            else (
                if (draw > 1.0)
                    then 1.0
                    else draw
            ) 
        ) ( normal (0.5, 0.25) )
    ) ;


    # Function that generates a (NOT UNIFORM) random idx between 0 and n
    rand_idx ← ( ( fix f . λ r . λ n . λ c . λ inc .
        if ( n = (n_vertices-1) ) then n else (  # Catch rounding errors
            if ( ( r ≥ c ) ∧ ( r < ( c + inc ) ) )
                then n # x falls in the interval for idx n
                else prevI (f ⊙ next r ⊙ next (n+1) ⊙ next (c+inc) ⊙ next inc)
        ) ) rand 0 0.0 (1 / n_vertices)
    ) ;

    # Mutation function, randomly flips one bit in the solution vector
    mutate ← ( flip_bit rand_idx ) ;

    # The chance of accepting a neigbour if it is worse
    p_accept_new ← ( λ old . λ new . λ temp . 
        exp( - ( ( eval(new) - eval(old) ) / temp ) )
    ) ;

    # Non-deterministically select between neighbour and original
    select ← ( λ old . λ new . λ temp . 
        if ( (eval new) < (eval old) )
            then new
            else (
                if ( rand < ( p_accept_new old new temp ) )
                    then new 
                    else old
            )
    ) ;
    
    # Gets the temperature for round k
    get_temp ← ( λ k . init_temp / (k + 1) ) ; 

    # The optimization stream
    opt_stream ← ( boxI ( ( fix f . λ k . λ s . in (
        ( s, f ⊙ next ( k + 1 ) 
               ⊙ next ( select s ( mutate s ) ( get_temp k ) ) 
        ) ) ) 0 init_s )
    ) ;
    

    flip_bit ← ( fix f . λ idx . λ s . 
        match s {
            inL x → false ; # Should not happen
            inR y → if ( idx = 0 )
                then ( inR ( ( ¬( fst y ), ( snd y ) ) ) )
                else ( inR ( ( fst y, prevI ( f ⊙ next ( idx-1 ) ⊙ next ( snd y ) ) ) ) )
        }
    ) ;

    # Get the result at iteration idx
    get_result ← ( fix f . λ idx . λ stream .
        if (idx = 0)
            then head stream
            else prevI ( f ⊙ next (idx - 1) ⊙ next (tail stream) )
    )

# in: print (0 , (append [1,2,3] [4,5,6]) )
in: print ( get_result iteration opt_stream )

